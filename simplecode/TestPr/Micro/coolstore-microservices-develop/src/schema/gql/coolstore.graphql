type Product {
  id: String!
  name: String!
  price: Float!
  imageUrl: String!
  desc: String
}

input GetProductsInput {
  currentPage: Int!
  highPrice: Float!
}

input GetProductByIdInput {
  productId: String!
}

input CreateProductInput {
  name: String!
  price: Float!
  imageUrl: String!
  desc: String
}

type Cart {
  id: String!
  cartItemTotal: Float!
  cartItemPromoSavings: Float!
  shippingTotal: Float!
  shippingPromoSavings: Float!
  cartTotal: Float!
  isCheckOut: Boolean!
  items: [CartItem]
}

input GetCartInput {
  cartId: String!
}

input InsertItemToNewCartInput {
  productId: String!
  quantity: Int!
}

input UpdateItemInCartInput {
  cartId: String!
  productId: String!
  quantity: Int!
}

input DeleteItemInput {
  cartId: String!
  productId: String!
}

input CheckoutInput {
  cartId: String!
}

type CartItem {
  productId: String!
  productName: String!
  quantity: Int!
  price: Float!
  promoSavings: Float!
}

type Inventory {
  id: String!
  location: String!
  quantity: Int!
  link: String!
}

input GetInventoryInput {
  id: String!
}

type Rating {
  id: String!
  productId: String!
  userId: String!
  cost: Float!
}

input GetRatingByProductIdInput {
  productId: String!
}

input CreateRatingInput {
  productId: String!
  userId: String!
  cost: Float!
}

input UpdateRatingInput {
  id: String!
  productId: String!
  userId: String!
  cost: Float!
}

directive @authorize on FIELD_DEFINITION

type Query {
  products(input: GetProductsInput!): [Product] @authorize
  product(input: GetProductByIdInput!): Product @authorize
  carts(input: GetCartInput!): Cart @authorize
  availabilities: [Inventory] @authorize
  availability(input: GetInventoryInput!): Inventory @authorize
  ratings: [Rating] @authorize
  rating(input: GetRatingByProductIdInput!): Rating @authorize
}

type Mutation {
  createProduct(input: CreateProductInput!): Product! @authorize
  insertItemToNewCart(input: InsertItemToNewCartInput!): Cart! @authorize
  updateItemInCart(input: UpdateItemInCartInput!): Cart! @authorize
  deleteItem(input: DeleteItemInput!): String! @authorize
  checkout(input: CheckoutInput!): Boolean! @authorize
  createRating(input: CreateRatingInput!): Rating! @authorize
  updateRating(input: UpdateRatingInput!): Rating! @authorize
}

schema {
  query: Query
  mutation: Mutation
}
