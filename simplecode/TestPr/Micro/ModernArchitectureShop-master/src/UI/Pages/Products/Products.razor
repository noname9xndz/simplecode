@page "/products"
@page "/products/{Page:int}"
@using ModernArchitectureShop.BlazorUI.Models
@using ModernArchitectureShop.BlazorUI.Services
@using Newtonsoft.Json
@using AutoMapper
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@inject ProductService ProductService
@inject BasketProductService BasketProductService
@inject IHttpContextAccessor HttpContextAccessor

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    .button {
      cursor: pointer;
      outline: none;
      color: #fff;
      background-color: #4CAF50;
      border: none;
      margin: 3px;
      -ms-border-radius: 7px;
      border-radius: 7px;
      box-shadow: 0 5px #999;
    }

    .button:hover {background-color: #3e8e41}

    .button:active {
      background-color: #3e8e41;
      box-shadow: 0 3px #666;
      -ms-transform: translateY(4px);
      -webkit-transform: translateY(4px);
      transform: translateY(4px);
    }
  </style>
</head>

<h6 style="color: red">@_errorMessage</h6>
@if (_productsModel.TotalOfProducts == 0)
{
    <div class="text-center">
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>
}
else
{
  <div class="row mt-4">
    @foreach (var product in _productsModel.Products)
    {
      <div class="col-md-4">
        <div class="card mb-4 shadow-sm">
          <div class="card-body">
            <div class="media">
              <span style="margin: 5px">
              <img src="@product?.ImageUrl" alt="..." width="50" height="50">
              </span>
              <div class="media-body">
                <h5 class="mt-0">@product?.Name</h5>
                <div>Category: @product?.Code</div>
                <div>Location: Todo</div>
                <div>Price: <span class="font-weight-bold" style="color: red;">$@product?.Price.ToString("0.##")</span></div>
                <div class="d-flex justify-content-between align-items-center" style="margin: 15px 0 0;">
                  <div>Available: <span class="font-weight-bold" style="color: blue;">@product.ProductStores.FirstOrDefault().Quantity</span></div>
                  <div class="btn-group">
                    <button class="button" @onclick="@(async () =>
                                                     {
                                                       var config = new MapperConfiguration(
                                                         cfg =>
                                                         {
                                                           cfg.CreateMap<ProductModel, ItemModel>()
                                                             .ForMember(
                                                               x => x.ItemId,
                                                               map => map.MapFrom(o => o.ProductId)
                                                             );
                                                         });

                                                       var mapper = new Mapper(config);
                                                       var itemModel = mapper.Map<ItemModel>(product);
                                                       itemModel.Username = HttpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;
                                                       itemModel.StoreId = Guid.Empty;
                                                       await AddProductToBasketAsync(itemModel);
                                                     })">➕</button>

                    <button class="button" @onclick="@(async () => await RemoveProductFromBasketAsync(product.ProductId))">❌</button>
                  </div>
                </div>
                <div class="d-flex justify-content-between align-items-center" style="margin: 15px 0 0;">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    }
  </div>

  <div class="d-flex justify-content-center">
    <nav aria-label="Page navigation example">
      <ul class="pagination">
        <li class="page-item">
          <a class="page-link" href="/products/1" aria-label="First">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>
        @for (var i = 1; i <= Math.Round((double) _productsModel.TotalOfProducts / _pageSize); i++)
        {
          <li class="page-item">
            <a class="page-link" href="/products/@i">@i</a>
          </li>
        }
        <li class="page-item">
          <a class="page-link" href="/products/@(Math.Round((double) _productsModel.TotalOfProducts / _pageSize))" aria-label="Last">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
}

@code {

    [Parameter]
    public int Page { get; set; } = 1;

    readonly int _pageSize = 9;
    private string _errorMessage;

    ProductsModel _productsModel = new ProductsModel();

    protected override async Task OnInitializedAsync()
    {
      _errorMessage =string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
      var response = await ProductService.GetProductsAsync(ProcessUrl());

      if (response.StatusCode == (int) System.Net.HttpStatusCode.OK)
      {
        _productsModel = JsonConvert.DeserializeObject<ProductsModel>(response.Content);
      }
      else
      {
        _errorMessage = $"Error: {response.Error}";
        _productsModel = new ProductsModel();
      }
    }

  async Task AddProductToBasketAsync(ItemModel itemModel)
  {
    var response =  await BasketProductService.AddItemAsync($"api/item/",itemModel);

    if (response.StatusCode != (int) System.Net.HttpStatusCode.OK)
    {
      _errorMessage = $"Error: {response.Error}";
      _productsModel = new ProductsModel();
    }
  }

  async Task RemoveProductFromBasketAsync(Guid id)
  {
    var response =  await BasketProductService.RemoveItemAsync($"api/item/{id}");

    if (response.StatusCode != (int) System.Net.HttpStatusCode.OK)
    {
      _errorMessage = $"Error: {response.Error}";
      _productsModel = new ProductsModel();
    }
  }

  private string ProcessUrl()
    {
      // todo
      if (Page == 0)
      Page =1;

        var url = $"api/products?PageIndex={Page}&PageSize={_pageSize}";
        return url;
    }
}
